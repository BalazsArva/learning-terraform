trigger:
  - master

variables:
  - group: AzureCredentials

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: BuildAndTest
  displayName: Build & run pre-deployment tests
  jobs:
  - job: BuildAndTest
    displayName: Build & Test
    steps:
    - task: DotNetCoreCLI@2
      displayName: Run dotnet restore
      inputs:
        command: restore
        projects: '$(System.DefaultWorkingDirectory)/App'
        includeNuGetOrg: true
    - task: DotNetCoreCLI@2
      displayName: Run dotnet build
      inputs:
        command: build
        arguments: '--configuration Debug --no-restore'
        projects: '$(System.DefaultWorkingDirectory)/App'
    - task: DotNetCoreCLI@2
      displayName: Execute unit tests
      inputs:
        command: test
        arguments: '--no-build'
        projects: '$(System.DefaultWorkingDirectory)/App/Tests/LearningTerraform.BusinessLogic.UnitTests'
    - script: |
        echo $(DockerDbContainerPassword)
        docker run -d --name MSSQL --rm -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=$(DockerDbContainerPassword)' -e 'MSSQL_PID=Developer' -p 1433:1433 -d mcr.microsoft.com/mssql/server:2017-latest
      displayName: Create DB Container
    - script: |
        wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh
        dotnet tool install --global --version 3.1.9 dotnet-ef
        export PATH=$PATH:$HOME/.dotnet/tools
        . ~/.bashrc
        chmod +rx wait-for-it.sh
        docker ps -a
        ./wait-for-it.sh -h localhost -p 1433 -t 180
        docker ps -a
        docker logs MSSQL
      displayName: Install tools
    # - task: ShellScript@2
    #   inputs:
    #     scriptPath: '$(System.DefaultWorkingDirectory)/wait-for-it.sh'
    #     args: '-h host.docker.internal -p 1433 -t 120'
    #   displayName: Wait for DB Container
    - script: |
        export PATH=$PATH:$HOME/.dotnet/tools
        . ~/.bashrc
        dotnet ef database update -s ../LearningTerraform.Api
      displayName: Migrate Database in Container
      workingDirectory: '$(System.DefaultWorkingDirectory)/App/Src/LearningTerraform.DataAccess.MsSql'
      env:
        ConnectionStrings__Default: 'Server=localhost,1433;Database=LearningTerraform;User Id=sa;password=$(DockerDbContainerPassword)'
    - script: |
        docker stop MSSQL
      displayName: Destroy DB Container

- stage: ExecuteTerraform
  dependsOn: BuildAndTest
  condition: false
  jobs:
  - job: ApplyTerraform
    displayName: Apply Terraform
    steps:
    - script: terraform init
      workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
      displayName: 'Terraform - Initialize'
      env:
        ARM_CLIENT_ID: '$(Azure.ClientId)'
        ARM_CLIENT_SECRET: '$(Azure.ClientSecret)'
        ARM_SUBSCRIPTION_ID: '$(Azure.SubscriptionId)'
        ARM_TENANT_ID: '$(Azure.TenantId)'

    - script: terraform apply -auto-approve
      workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
      displayName: 'Terraform - Apply'
      env:
        ARM_CLIENT_ID: '$(Azure.ClientId)'
        ARM_CLIENT_SECRET: '$(Azure.ClientSecret)'
        ARM_SUBSCRIPTION_ID: '$(Azure.SubscriptionId)'
        ARM_TENANT_ID: '$(Azure.TenantId)'
