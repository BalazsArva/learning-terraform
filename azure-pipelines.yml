variables:
  - group: AzureCredentials
  - name: ImageName
    readonly: true
    value: 'learning-terraform-api'
  - name: ImageTag
    readonly: true
    value: $(Build.BuildId)
  - name: IsMaster
    readonly: true
    value: $[ eq(variables['Build.SourceBranch'], 'refs/heads/master') ]

pool:
  vmImage: 'ubuntu-latest'

trigger:
  branches:
    include:
      - master

stages:
- stage: CreateDockerImage
  displayName: Create Docker image
  dependsOn: BuildAndRunPreDeploymentTests
  condition: succeeded('BuildAndRunPreDeploymentTests')
  jobs:
  - job: ApplyTerraform
    displayName: Apply pre-deployment Terraform changes
    steps:
    - script: terraform init
      workingDirectory: Terraform/Predeploy
      displayName: Terraform - Initialize
      env:
        ARM_CLIENT_ID: '$(Azure.ClientId)'
        ARM_CLIENT_SECRET: '$(Azure.ClientSecret)'
        ARM_SUBSCRIPTION_ID: '$(Azure.SubscriptionId)'
        ARM_TENANT_ID: '$(Azure.TenantId)'

    - script: |
        terraform plan -out=tfplan
        terraform apply "tfplan"
      workingDirectory: Terraform/Predeploy
      displayName: Terraform - Plan & Apply
      env:
        ARM_CLIENT_ID: '$(Azure.ClientId)'
        ARM_CLIENT_SECRET: '$(Azure.ClientSecret)'
        ARM_SUBSCRIPTION_ID: '$(Azure.SubscriptionId)'
        ARM_TENANT_ID: '$(Azure.TenantId)'

  - job: BuildAndPushDockerImage
    displayName: Build & push Docker image
    dependsOn: ApplyTerraform
    condition: succeeded('ApplyTerraform')
    steps:
    - task: Docker@2
      displayName: Login to Azure Container Registry
      inputs:
        command: login
        containerRegistry: AzureServiceConnection

    - task: Docker@2
      displayName: Build Docker image
      inputs:
        command: build
        buildContext: App/Src
        Dockerfile: App/Src/LearningTerraform.Api/Dockerfile
        repository: $(ImageName)
        tags: $(ImageTag)

    - task: Docker@2
      displayName: Push Docker image
      # condition: eq(variables.IsMaster, true)
      # TODO: Remove later. Remember that by removing this, deployment will fail if it is not being run from master.
      condition: true
      inputs:
        command: push
        containerRegistry: AzureServiceConnection
        repository: $(ImageName)
        tags: $(ImageTag)

    - task: Docker@2
      displayName: Log out of Azure Container Registry
      inputs:
        command: logout

- stage: DeployTest
  displayName: Deploy to Test
  dependsOn: CreateDockerImage
  # condition: and(succeeded('CreateDockerImage'), eq(variables.IsMaster, true))
  condition: succeeded('CreateDockerImage')
  jobs:
  - job: ApplyTerraform
    displayName: Apply Terraform changes
    steps:
    - script: terraform init
      workingDirectory: Terraform/Postdeploy
      displayName: 'Terraform - Initialize'
      env:
        ARM_CLIENT_ID: '$(Azure.ClientId)'
        ARM_CLIENT_SECRET: '$(Azure.ClientSecret)'
        ARM_SUBSCRIPTION_ID: '$(Azure.SubscriptionId)'
        ARM_TENANT_ID: '$(Azure.TenantId)'

    - script: |
        terraform plan -out=tfplan_test -var 'image_tag=$(ImageTag)' -var 'image_registry_username=$(Azure.ClientId)' -var 'image_registry_password=$(Azure.ClientSecret)'
        terraform apply "tfplan_test"
      workingDirectory: Terraform/Postdeploy
      displayName: Terraform - Plan & Apply
      env:
        ARM_CLIENT_ID: '$(Azure.ClientId)'
        ARM_CLIENT_SECRET: '$(Azure.ClientSecret)'
        ARM_SUBSCRIPTION_ID: '$(Azure.SubscriptionId)'
        ARM_TENANT_ID: '$(Azure.TenantId)'
