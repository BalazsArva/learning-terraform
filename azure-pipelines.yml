variables:
  - group: AzureCredentials
  - name: ImageName
    readonly: true
    value: 'learning-terraform-api'
  - name: ImageTag
    readonly: true
    value: $(Build.BuildId)
  - name: IsMaster
    readonly: true
    value: $[ eq(variables['Build.SourceBranch'], 'refs/heads/master') ]

pool:
  vmImage: 'ubuntu-latest'

trigger:
  branches:
    include:
      - master

stages:
- stage: CreateDockerImage
  displayName: Create Docker image
  jobs:
  - job: ApplyTerraform
    displayName: Apply core Terraform changes
    steps:
    - script: terraform init
      workingDirectory: Terraform/Core
      displayName: Terraform - Initialize
      env:
        ARM_CLIENT_ID: '$(Azure.ClientId)'
        ARM_CLIENT_SECRET: '$(Azure.ClientSecret)'
        ARM_SUBSCRIPTION_ID: '$(Azure.SubscriptionId)'
        ARM_TENANT_ID: '$(Azure.TenantId)'

    - script: |
        terraform plan -out=tfplan
        terraform apply "tfplan"
      workingDirectory: Terraform/Core
      displayName: Terraform - Plan & Apply
      env:
        ARM_CLIENT_ID: '$(Azure.ClientId)'
        ARM_CLIENT_SECRET: '$(Azure.ClientSecret)'
        ARM_SUBSCRIPTION_ID: '$(Azure.SubscriptionId)'
        ARM_TENANT_ID: '$(Azure.TenantId)'

  - job: BuildAndPushDockerImage
    displayName: Build & push Docker image
    dependsOn: ApplyTerraform
    condition: succeeded('ApplyTerraform')
    steps:
    - task: Docker@2
      displayName: Login to Azure Container Registry
      inputs:
        command: login
        containerRegistry: AzureServiceConnection

    - task: Docker@2
      displayName: Build Docker image
      inputs:
        command: build
        buildContext: App/Src
        Dockerfile: App/Src/LearningTerraform.Api/Dockerfile
        repository: $(ImageName)
        tags: $(ImageTag)

    - task: Docker@2
      displayName: Push Docker image
      inputs:
        command: push
        containerRegistry: AzureServiceConnection
        repository: $(ImageName)
        tags: $(ImageTag)

    - task: Docker@2
      displayName: Log out of Azure Container Registry
      inputs:
        command: logout

- stage: DeployTest
  displayName: Deploy to Test
  dependsOn: CreateDockerImage
  condition: succeeded('CreateDockerImage')
  jobs:
  - job: ApplyTerraformPredeploy
    displayName: Apply pre-deployment Terraform changes
    steps:
    - script: terraform init
      workingDirectory: Terraform/Predeploy
      displayName: 'Terraform - Initialize'
      env:
        ARM_CLIENT_ID: '$(Azure.ClientId)'
        ARM_CLIENT_SECRET: '$(Azure.ClientSecret)'
        ARM_SUBSCRIPTION_ID: '$(Azure.SubscriptionId)'
        ARM_TENANT_ID: '$(Azure.TenantId)'

    - script: |
        terraform plan -out=tfplan_test -var 'image_tag=$(ImageTag)' -var 'image_registry_username=$(Azure.ClientId)' -var 'image_registry_password=$(Azure.ClientSecret)' -var 'db_server_admin_login=$(Azure.DbServer.AdminLogin)' -var 'db_server_admin_password=$(Azure.DbServer.AdminPassword)'
        terraform apply "tfplan_test"
        sql_server_fqdn=eval terraform output -raw sql_server_fqdn
        echo "##vso[task.setvariable variable=SqlServerFqdn]$sql_server_fqdn"
      workingDirectory: Terraform/Predeploy
      displayName: Terraform - Plan & Apply
      env:
        ARM_CLIENT_ID: '$(Azure.ClientId)'
        ARM_CLIENT_SECRET: '$(Azure.ClientSecret)'
        ARM_SUBSCRIPTION_ID: '$(Azure.SubscriptionId)'
        ARM_TENANT_ID: '$(Azure.TenantId)'

    - task: AzureCLI@2
      displayName: Allow agent through firewall
      inputs:
        azureSubscription: AzureResourceManagerServiceConnection
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          ip=$(curl ifconfig.me)
          az sql server firewall-rule create --end-ip-address $ip --start-ip-address $ip --name 'pipeline-allow' --resource-group 'LearningTerraform' --server 'learning-terraform-db'

  - job: MigrateDatabase
    displayName: Migrate SQL database
    dependsOn: ApplyTerraformPredeploy
    condition: succeeded('ApplyTerraformPredeploy')
    steps:
    - script: dotnet tool install --global --version 5.0.1 dotnet-ef
      displayName: Install EF tools
    - script: |
        export PATH=$PATH:$HOME/.dotnet/tools
        . ~/.bashrc
        dotnet ef database update -s ../LearningTerraform.Api
      workingDirectory: App/Src/LearningTerraform.DataAccess.MsSql
      displayName: Apply EF migrations
      env:
        ConnectionStrings__Default: 'Server=tcp:$(SqlServerFqdn),1433;Initial Catalog=learning-terraform-db;Persist Security Info=False;User ID=$(Azure.DbServer.AdminLogin);Password=$(Azure.DbServer.AdminPassword);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'

  - job: ApplyTerraform
    displayName: Apply Terraform changes
    dependsOn: MigrateDatabase
    condition: succeeded('MigrateDatabase')
    steps:
    - script: terraform init
      workingDirectory: Terraform/Deploy
      displayName: 'Terraform - Initialize'
      env:
        ARM_CLIENT_ID: '$(Azure.ClientId)'
        ARM_CLIENT_SECRET: '$(Azure.ClientSecret)'
        ARM_SUBSCRIPTION_ID: '$(Azure.SubscriptionId)'
        ARM_TENANT_ID: '$(Azure.TenantId)'

    - script: |
        terraform plan -out=tfplan_test -var 'image_tag=$(ImageTag)' -var 'image_registry_username=$(Azure.ClientId)' -var 'image_registry_password=$(Azure.ClientSecret)' -var 'db_connection_string='
        terraform apply "tfplan_test"
      workingDirectory: Terraform/Deploy
      displayName: Terraform - Plan & Apply
      env:
        ARM_CLIENT_ID: '$(Azure.ClientId)'
        ARM_CLIENT_SECRET: '$(Azure.ClientSecret)'
        ARM_SUBSCRIPTION_ID: '$(Azure.SubscriptionId)'
        ARM_TENANT_ID: '$(Azure.TenantId)'
